package user

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/bisal-dd/go-backend-boilerplate/graph/model"
	"github.com/bisal-dd/go-backend-boilerplate/helper/emails"
	"github.com/bisal-dd/go-backend-boilerplate/helper/time"
)

func (r *UserResolver) CreateUser(ctx context.Context, input model.CreateUser) (*model.User, error) {
	db := r.db
	me := &model.User{
		ID: input.ID,
		Mode: "trial",
		UseCount: 0,
		CreatedAt: time.CurrentTime(),
	}
	if err := db.Create(me).Error; err != nil {
		return nil, err
	}
	err := emails.SendEmail(
		"test@gmail.com",
		"Welcome to our platform!",
		"templates/emails/welcome.html",
		map[string]interface{}{
			"UserName": input.ID,  
		},
	)
	if err != nil {
		return nil, err
	}

	return me, nil
}


func (r *UserResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
    db := r.db
    user := &model.User{
        ID: id,
    }
    if err := db.Delete(user).Error; err != nil {
        return false, err
    }

    return true, nil
}